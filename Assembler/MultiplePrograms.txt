CALL 7 //Call Register reset
CALL 24 //Call Fibonacci
CALL 7 //Call Register reset
CALL 39 //Call One bits counter
CALL 7 //Call Register reset
CALL 46 //Call x^y calculator
CALL 7 //Call Register reset


//Register reset
LOAD x0 0 //Line 8
LOAD x1 0
LOAD x2 0
LOAD x3 0
LOAD x4 0
LOAD x5 0
LOAD x6 0
LOAD x7 0
LOAD x8 0
LOAD x9 0
LOAD xA 0
LOAD xB 0
LOAD xC 0
LOAD xD 0
LOAD xE 0
LOAD xF 0
RETURN




//Fibonacci
LOAD x0, 0 //Line 25
LOAD x1, 1
LOAD x2, 10 //amount of steps
LOAD x3, 0 //counter

//While counter < steps, run fib-loop.
COMPARE x3, x2
JUMPC 31 //Jump to Fib-loop
JUMP 38 //Jump to End

//Fib-loop:
LOAD x4, 0
ADD x4, x0
ADD x4, x1
LOAD x0, x1
LOAD x1, x4
ADD x3, 1
JUMP 28 //Jump to while

//End:
RETURN





//One bits counter
LOAD x0 27 //x0 = 00011011 = 4 ones //Line 40

//Loop:
SR0 x0
ADDCY x1 0
COMPARE x0 0
JUMPZ 45 //Jump to end
JUMP 40 //Jump to loop

//End:
RETURN





//Calculate x^y
LOAD x0, 3 //x value //Line 47
LOAD x1, 4 //y value

COMPARE x0, 2
JUMPZ 61 //Jump to shift block if x = 2.
LOAD x4, x0

//multiply:
COMPARE x1, 1
JUMPZ 20 //Jump to end.
SUB x1, 1
LOAD x2, x0
LOAD x3, x4
//add:
COMPARE x3, 1
JUMPZ 51 //Repeat multiply block.
ADD x0, x2
SUB x3, 1
JUMP 56 //Repeat add block.

//Shift:
COMPARE x1, 1
JUMPZ 66 //Jump to end.
SL0 x0
SUB x1, 1
JUMP 61 //Repeat Shift block.

//End:
LOAD x5, x0 //Save result in x5.


















