//Author: Jannik Graef
//Assembler to find prime numbers
LOAD x4, 2
//x6 is x4 / 2. so that only half as many numbers need to be tested
LOAD x6, 1
LOAD x5, 0 //RAM address to write new primes to

Label1
LOAD x2, 1
Label2
COMPARE x6, x2
//all numbers up to x4 / 2 have been checked and no divider has been found =>x4 is prime
JUMPZ prime
ADD x2, 1 
LOAD x1, x4
CALL divider //divide x4 and x2
COMPARE x1, 0 // x2 divides x4 => x4 is not a prime
JUMPZ noPrime
JUMP Label2

prime
STORE x4, x5
ADD x5, 1

noPrime
ADD x4, 1
LOAD x6, x4
SR0 x6 // x4 / 2 rounded down
JUMPZ end //end the programm if all possible numbers have been tested
JUMP Label1


divider // div x1 and x2 saves divident in x3 and rest in x1
LOAD x3, 0 //rest
LoopStart
SUB x1, x2
JUMPC LoopEnd
ADD x3, 1
JUMP LoopStart
LoopEnd
ADD x1, x2
RETURN


end




