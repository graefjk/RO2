Referenced Files:

write_tb.py
template.vhd
template_begining.vhd
template_begining2.vhd
template_begining3.vhd
template_begining4.vhd
template_end.vhd

ADD_tb_long1.vhd
IP_tb_long1.vhd
PC_tb_long1.vhd
PC_tb_long2.vhd
PC_tb_long3.vhd
Stack_tb_long1.vhd

Testet uut's:
PC.vhd
ADD.vhd
stack.vhd
IP.vhd


Die hier mir #write_tb.py erstellten VHDL Tests diehnen zur ausführlicheren Überprüfung der hier genannten uut's.
Wird "The Test is finished" in der console angezeigt ohne dass vorher ein error geworfen wird, war der Test ervolgreich.
PC:
- Werden alle PC_inputs richtig zur Taktflanke weitergegeben? -> PC_tb_long1.vhd
- Werden alle PC_inputs richtig nicht zur Taktflanke weitergegeben wenn enable=0 
	und entsprechend liegt das richtige output an wenn enable zurückgeschrieben wird? -> PC_tb_long2.vhd
- Wird der reset unabhängig vom input richtig gesetzt? -> PC_tb_long3.vhd
ADD:
- Werden alle sA_s richtig incrementiert unabhängig von der Taktflanke? -> ADD_tb_long1.vhd
IP:
- Wird jede Zeile entsprechend ausgegeben?
- kleinere datei was passiert bei nicht definierten zeilen
- zu groses file was passiert
- in file.data schreiben tests
-was passiert bei input UUU?
Stack:
- Was passiert, wenn der Stack nachdem er voll ist weiter gefüllt wird? -> Stack_tb_long3.vhd, Stack_tb_long4.vhd
- Was passiert, wenn man dem lehren Stack dinge entnehmen möchte? -> Stack_tb_long1.vhd, Stack_tb_long2.vhd
- Ist es tatsächlich ein Stack und keine Liste? Gilt LiFo? -> Stack_tb_long5.vhd
- Was wird bei enable=0 ausgegeben? -> Stack_tb_long7.vhd, Stack_tb_long8.vhd
(passt heirbei das mux steuersignal mit enable zusammen?)
- Was passiert bei unstabielem write_or_read?
- Ist reset richtig? -> Stack_tb_long9.vhd
- Standardtest 3 Layer füllen und entnehmen -> Stack_tb_long6.vhd
- Werden alle inputmöglichkeiten richtig wieder zurückgegeben? -> Stack_tb_long6.vhd
+ UUU ist ok in Stack_tb_long1.vhd, Stack_tb_long3.vhd
+ Reset 111 anstelle 000
